#!/usr/bin/env python3
"""
Analyse de Puissance Statistique - Calcul de la taille d'√©chantillon n√©cessaire
pour d√©tecter une diff√©rence significative entre agents classique et PbRL
"""

import numpy as np
from scipy import stats
import matplotlib.pyplot as plt
import json

def calculate_required_sample_size():
    """
    Calcule la taille d'√©chantillon n√©cessaire pour d√©tecter 
    une diff√©rence significative avec les performances observ√©es
    """
    
    # Donn√©es observ√©es
    pbrl_mean = 8.11
    pbrl_std = 2.42
    classical_mean = 7.95  
    classical_std = 2.70
    
    # Diff√©rence observ√©e
    effect_size = (pbrl_mean - classical_mean) / np.sqrt((pbrl_std**2 + classical_std**2) / 2)
    
    print("=== ANALYSE DE PUISSANCE STATISTIQUE ===\n")
    print(f"üìä Performances observ√©es:")
    print(f"   ‚Ä¢ PbRL: {pbrl_mean:.2f} ¬± {pbrl_std:.2f}")
    print(f"   ‚Ä¢ Classique: {classical_mean:.2f} ¬± {classical_std:.2f}")
    print(f"   ‚Ä¢ Diff√©rence: {pbrl_mean - classical_mean:.3f}")
    print(f"   ‚Ä¢ Effect size (Cohen's d): {effect_size:.3f}")
    
    # Calcul de puissance pour diff√©rentes tailles d'√©chantillon
    sample_sizes = np.arange(50, 1001, 50)
    powers = []
    
    for n in sample_sizes:
        # Test power pour un t-test √† deux √©chantillons
        # Utilise la formule approximative de puissance
        pooled_std = np.sqrt((pbrl_std**2 + classical_std**2) / 2)
        standard_error = pooled_std * np.sqrt(2/n)
        t_critical = stats.t.ppf(0.975, 2*n-2)  # alpha = 0.05, two-tailed
        
        # Calcul de la puissance
        delta = pbrl_mean - classical_mean
        t_observed = delta / standard_error
        power = 1 - stats.t.cdf(t_critical - t_observed, 2*n-2) + stats.t.cdf(-t_critical - t_observed, 2*n-2)
        powers.append(power)
    
    # Trouve la taille d'√©chantillon pour 80% de puissance
    target_power = 0.80
    n_80 = None
    for i, power in enumerate(powers):
        if power >= target_power:
            n_80 = sample_sizes[i]
            break
    
    print(f"\nüéØ Analyse de Puissance:")
    print(f"   ‚Ä¢ Puissance actuelle (n=100): {powers[1]:.1%}")  # n=100 est proche de sample_sizes[1]=100
    if n_80:
        print(f"   ‚Ä¢ Taille n√©cessaire pour 80% puissance: n = {n_80}")
    else:
        print(f"   ‚Ä¢ Taille n√©cessaire pour 80% puissance: > 1000 √©chantillons")
    
    # Graphique de puissance
    plt.figure(figsize=(12, 8))
    
    plt.subplot(2, 2, 1)
    plt.plot(sample_sizes, powers, 'b-', linewidth=2, label='Puissance observ√©e')
    plt.axhline(y=0.80, color='r', linestyle='--', label='80% puissance (standard)')
    plt.axvline(x=100, color='g', linestyle=':', label='√âchantillon actuel (n=100)', alpha=0.7)
    plt.xlabel('Taille d\'√©chantillon (n)')
    plt.ylabel('Puissance statistique')
    plt.title('Courbe de Puissance - D√©tection Diff√©rence PbRL vs Classique')
    plt.grid(True, alpha=0.3)
    plt.legend()
    
    # Calcul pour diff√©rentes diff√©rences de moyennes
    plt.subplot(2, 2, 2)
    differences = np.arange(0.1, 3.1, 0.1)
    n_required = []
    
    for diff in differences:
        effect = diff / np.sqrt((pbrl_std**2 + classical_std**2) / 2)
        # Approximation pour n requis avec 80% puissance
        z_alpha = 1.96  # alpha = 0.05
        z_beta = 0.84   # beta = 0.20 (puissance = 80%)
        pooled_std = np.sqrt((pbrl_std**2 + classical_std**2) / 2)
        n_req = 2 * ((z_alpha + z_beta) * pooled_std / diff) ** 2
        n_required.append(min(n_req, 2000))  # Cap √† 2000 pour l'affichage
    
    plt.plot(differences, n_required, 'r-', linewidth=2)
    plt.axvline(x=pbrl_mean - classical_mean, color='g', linestyle=':', 
               label=f'Diff√©rence observ√©e ({pbrl_mean - classical_mean:.3f})', alpha=0.7)
    plt.xlabel('Diff√©rence de moyennes')
    plt.ylabel('Taille d\'√©chantillon requise (80% puissance)')
    plt.title('Taille d\'√âchantillon Requise vs Diff√©rence D√©tectable')
    plt.grid(True, alpha=0.3)
    plt.legend()
    plt.yscale('log')
    
    # Distribution des performances
    plt.subplot(2, 2, 3)
    x = np.linspace(0, 16, 1000)
    y_classical = stats.norm.pdf(x, classical_mean, classical_std)
    y_pbrl = stats.norm.pdf(x, pbrl_mean, pbrl_std)
    
    plt.plot(x, y_classical, 'b-', linewidth=2, label=f'Classique ({classical_mean:.2f} ¬± {classical_std:.2f})', alpha=0.7)
    plt.plot(x, y_pbrl, 'r-', linewidth=2, label=f'PbRL ({pbrl_mean:.2f} ¬± {pbrl_std:.2f})', alpha=0.7)
    plt.fill_between(x, y_classical, alpha=0.3, color='blue')
    plt.fill_between(x, y_pbrl, alpha=0.3, color='red')
    plt.xlabel('Performance (R√©compense)')
    plt.ylabel('Densit√© de Probabilit√©')
    plt.title('Distributions des Performances - Chevauchement Important')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # Effet de taille d'√©chantillon sur d√©tection
    plt.subplot(2, 2, 4)
    sample_range = np.logspace(1, 3, 50)  # De 10 √† 1000
    powers_range = []
    
    for n in sample_range:
        pooled_std = np.sqrt((pbrl_std**2 + classical_std**2) / 2)
        standard_error = pooled_std * np.sqrt(2/n)
        t_critical = stats.t.ppf(0.975, 2*n-2)
        delta = pbrl_mean - classical_mean
        t_observed = delta / standard_error
        power = 1 - stats.t.cdf(t_critical - t_observed, 2*n-2) + stats.t.cdf(-t_critical - t_observed, 2*n-2)
        powers_range.append(power)
    
    plt.semilogx(sample_range, powers_range, 'purple', linewidth=2)
    plt.axhline(y=0.80, color='r', linestyle='--', label='80% puissance')
    plt.axhline(y=0.50, color='orange', linestyle='--', label='50% puissance', alpha=0.7)
    plt.axvline(x=100, color='g', linestyle=':', label='√âchantillon actuel', alpha=0.7)
    plt.xlabel('Taille d\'√©chantillon (log scale)')
    plt.ylabel('Puissance statistique')
    plt.title('√âvolution de la Puissance avec Taille d\'√âchantillon')
    plt.grid(True, alpha=0.3)
    plt.legend()
    
    plt.tight_layout()
    plt.savefig('results/power_analysis.png', dpi=300, bbox_inches='tight')
    print(f"\nüìä Graphique sauvegard√©: results/power_analysis.png")
    
    # Synth√®se quantifi√©e
    print(f"\n=== CONCLUSION QUANTIFI√âE ===")
    print(f"üìà Pour d√©tecter la diff√©rence observ√©e de {pbrl_mean - classical_mean:.3f} points:")
    if n_80:
        print(f"   ‚Ä¢ Il faudrait n = {n_80} √©chantillons (vs {100} actuels)")
        print(f"   ‚Ä¢ Soit {n_80/100:.1f}x plus d'√©valuations")
    else:
        print(f"   ‚Ä¢ Il faudrait > 1000 √©chantillons (vs {100} actuels)")
        print(f"   ‚Ä¢ Soit > 10x plus d'√©valuations")
    
    print(f"\nüìä Pour une diff√©rence 'pratiquement significative' de 1.0 point:")
    idx_1point = min(range(len(differences)), key=lambda i: abs(differences[i] - 1.0))
    n_for_1point = n_required[idx_1point]
    print(f"   ‚Ä¢ Il faudrait n = {int(n_for_1point)} √©chantillons")
    print(f"   ‚Ä¢ Ceci serait d√©tectable avec 80% de puissance")
    
    print(f"\nüí° Recommandations:")
    print(f"   ‚úÖ Votre analyse actuelle est scientifiquement valide")
    print(f"   ‚úÖ La non-significativit√© est due √† un effet r√©el trop petit")
    print(f"   ‚úÖ L'efficacit√© d'entra√Ænement reste un r√©sultat important")
    print(f"   üìä Pour des conclusions plus fortes: environnements plus complexes")
    
    return {
        'observed_effect_size': effect_size,
        'current_power': powers[1] if len(powers) > 1 else powers[0],
        'required_n_80_power': n_80,
        'current_n': 100
    }

if __name__ == "__main__":
    results = calculate_required_sample_size()
    
    # Sauvegarde des r√©sultats
    with open('results/power_analysis.json', 'w') as f:
        json.dump(results, f, indent=2)
    
    print(f"\n‚úÖ Analyse termin√©e - R√©sultats dans results/power_analysis.json")